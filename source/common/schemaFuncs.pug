+module.
    const pp_weight = 0.4;
    const gp_weight = 0.3;
    const sp_weight = 0.2;
    const cp_weight = 0.1;

    const getFieldID = (iPage,iZone,iTable,iField,iRowID) => {  // <<<------  duplicate in 
        let theFieldID = iPage;
        if (iZone!=='') { theFieldID += '-'+iZone};
        if (iTable!=='') { 
            if (tableIsTemplate.indexOf(iTable)!==(-1)) {
                theFieldID += '-'+iRowID+'-'+iField
            } else {
                theFieldID += '-'+iTable;
                if (iRowID!=='') {
                    theFieldID = 'repeating_'+theFieldID+'_'+iRowID+'_'  //specific field
                } else {
                    theFieldID = 'repeating_'+theFieldID+'_$X_'  //used in Affects and KFormula => formula = 'SUM of '+iTable+'.iField' => '(@{'+theFieldID+'})'
                }
                theFieldID += iField;
            }
        } else {
            if (iField!=='') { 
                theFieldID += '-'+iField
            };
        };

        //special fields
        if (iPage===idHeader) {
            if (iZone===idCharacter) {
                if (iField===idName) {
                theFieldID = 'character_name'
                }
                if (iField===idToken) {
                    theFieldID = 'character_token'
                }
                if (iField===idAvatar) {
                    theFieldID = 'character_avatar'
                }
            }
        }

        return theFieldID;
    };
    k.registerFuncs({getFieldID});

    const calcCoinWeight = (pp,gp,sp,cp) => {
        let coinTotal = 0;
        coinTotal = coinTotal+
            (pp*pp_weight) +
            (gp*gp_weight) +
            (sp*sp_weight) +
            (cp*cp_weight)
        ;

        return coinTotal;
    };
    k.registerFuncs({calcCoinWeight});

    const calcSectionWeight = (attributes,sections,sectionCalc) => {
        let totItemWeight = 0;
        if (sections[sectionCalc].length > 0) {
            sections[sectionCalc].forEach(id => {
                totItemWeight = totItemWeight + 
                    (attributes[sectionCalc+'_'+id+'_weight'] *
                        attributes[sectionCalc+'_'+id+'_qty']);
            });
        };

        return totItemWeight;
    };
    k.registerFuncs({calcSectionWeight});

    const getSlotTypeSection = (slottype) => {
        let rowSlotTypeSection = 'repeating_inventory-';
        if (slottype==='slottypeArmor') {
            rowSlotTypeSection = rowSlotTypeSection+'armor-items'
        } else if (slottype==='slottypeWeapon') {
            rowSlotTypeSection = rowSlotTypeSection+'weapon-items'
        } else if (slottype==='slottypeAccessory') {
            rowSlotTypeSection = rowSlotTypeSection+'accessory-items'
        } else if (slottype==='slottypeAmmo') {
            rowSlotTypeSection = rowSlotTypeSection+'ammo-items'
        } else if (slottype==='slottypeBeltPouch') {
            rowSlotTypeSection = rowSlotTypeSection+'beltpouch-items'
        } else if (slottype==='slottypeStorage') {
            rowSlotTypeSection = rowSlotTypeSection+'storage-items'
        } 
        else {
            rowSlotTypeSection = rowSlotTypeSection+'discardpile-items';
        }

        return rowSlotTypeSection;
    };
    k.registerFuncs({getSlotTypeSection});

    const doSectionRemoveAll = (attributes,sections,rowSection) => {
        if (sections[rowSection].length > 0) {
            sections[rowSection].forEach(id => {
                k.removeRepeatingRow(rowSection+'_'+id,attributes,sections);
            });
        };
    }
    k.registerFuncs({doSectionRemoveAll});

    const doSectionCopy = (attributes,sections,fromSectionID,toSectionID) => {
        let newRow = {};
        newRow[toSectionID+'_itemname'] = attributes[fromSectionID+'_itemname'];
        newRow[toSectionID+'_slottype'] = attributes[fromSectionID+'_slottype'];
        newRow[toSectionID+'_slottypeitem'] = attributes[fromSectionID+'_slottypeitem'];
        newRow[toSectionID+'_slot'] = attributes[fromSectionID+'_slot'];
        newRow[toSectionID+'_qty'] = attributes[fromSectionID+'_qty'];
        newRow[toSectionID+'_category'] = attributes[fromSectionID+'_category'];
        newRow[toSectionID+'_weight'] = attributes[fromSectionID+'_weight'];
        newRow[toSectionID+'_cost'] = attributes[fromSectionID+'_cost'];
        newRow[toSectionID+'_size'] = attributes[fromSectionID+'_size'];
        newRow[toSectionID+'_armorvalue'] = attributes[fromSectionID+'_armorvalue'];
        newRow[toSectionID+'_armortype'] = attributes[fromSectionID+'_armortype'];
        newRow[toSectionID+'_movetype'] = attributes[fromSectionID+'_movetype'];
        newRow[toSectionID+'_movepen'] = attributes[fromSectionID+'_movepen'];
        newRow[toSectionID+'_attackvs'] = attributes[fromSectionID+'_attackvs'];
        newRow[toSectionID+'_accmod'] = attributes[fromSectionID+'_accmod'];
        newRow[toSectionID+'_dammod'] = attributes[fromSectionID+'_dammod'];
        newRow[toSectionID+'_basedam'] = attributes[fromSectionID+'_basedam'];
        newRow[toSectionID+'_attacktype'] = attributes[fromSectionID+'_attacktype'];
        newRow[toSectionID+'_range'] = attributes[fromSectionID+'_range'];
        newRow[toSectionID+'_critabove'] = attributes[fromSectionID+'_critabove'];
        newRow[toSectionID+'_critmult'] = attributes[fromSectionID+'_critmult'];
        newRow[toSectionID+'_ammotype'] = attributes[fromSectionID+'_ammotype'];
        newRow[toSectionID+'_removeqty'] = attributes[fromSectionID+'_removeqty'];
        newRow[toSectionID+'_recoverperc'] = attributes[fromSectionID+'_recoverperc'];
        newRow[toSectionID+'_notes'] = attributes[fromSectionID+'_notes'];
        newRow[toSectionID+'_effects'] = attributes[fromSectionID+'_effects'];

        k.setAttrs(newRow,true);
    };
    k.registerFuncs({doSectionCopy});

    const doSectionDelete = (attributes,sections,rowSectionID) => {
        k.removeRepeatingRow(rowSectionID,attributes,sections);
    }
    k.registerFuncs({doSectionDelete});

    const doSetLevel = ({trigger,attributes,sections,casc}) => {
        //const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);

        if (attributes['header-character-level']===0) {
            k.setAttrs(
            {
                'header-character-level' : 1,
                'chaosseed-stats-strength-base' : 10,
                'chaosseed-stats-agility-base' : 10,
                'chaosseed-stats-dexterity-base' : 10,
                'chaosseed-stats-constitution-base' : 10,
                'chaosseed-stats-endurance-base' : 10,
                'chaosseed-stats-intelligence-base' : 10,
                'chaosseed-stats-wisdom-base' : 10,
                'chaosseed-stats-charisma-base' : 10,
                'chaosseed-stats-luck-base' : 10
            },true,()=>{console.log('set luck')});
        };
    };
    k.registerFuncs({doSetLevel},{type:['opener']});

    const doWriteLog = (attributes,sections,iMessage) => {
        const systemSection = 'repeating_system-main-messages';
        const systemSectionID = k.generateRowID(systemSection,sections);

        attributes[systemSectionID+'_system-message'] = iMessage;
    };
    k.registerFuncs({doWriteLog});

    const doAPIActivityMessage = async function(iItemId,iMessageStart,iMessageDone){
        const theAPICall = '!activityMessage '+iItemId+'|'+iMessageStart+'|'+iMessageDone;

        const roll = await startRoll(theAPICall);
        finishRoll(roll.rollId);
    };

    const ApplyEffects = (attributes,iEffects,iMult) => {
        let theOk = 0; //all ok
        let theArea = [];
        let theUpdate = [];
        let theField = '';
        let theValue = 0;
        let theEffects = iEffects;

        if ((theEffects) && (theEffects!=='')) {
            //process each line
            const lines = theEffects.split('\n');
            for(var i = 0;i < lines.length;i++) {
                const theArea = lines[i].split('.');
                theUpdate = theArea[1].split('+');
                if (theUpdate.length===0)  {
                    theUpdate = theArea[1].split('-');
                };

                if (theUpdate.length>0) {
                    theField = theUpdate[0];
                    theValue = parseInt(theUpdate[1])*iMult;
                } else {
                    doWriteLog(attributes,sections,'error parsing effects'+theEffects);
                    theOk = -1;
                }

                if (theOk===0) {
                    const theZone = theArea[0];
                    const theFieldID = getFieldID(idChaosSeed,theZone,theZone,idEquipBonus,theField);
                    attributes[theFieldID] += theValue;
                }
            }
        }

        return theOk;
    }

    const parseFieldId = (iFieldId) => {
        const theFields = iFieldId.split('-');

        return theFields;
    };

    const funcCore = async function({trigger,attributes,sections,casc}){
        const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);
        const attrName = buttonName.replace('-roller-action','-total');
        const zoneName = parseFieldId(attrName)[1]; //chaosseed-stats-agility-total, get stats
        const fieldName = parseFieldId(attrName)[2]; //chaosseed-stats-agility-total, get agility
        const displayName = schemaCore[zoneName][fieldName].displayname;

        //const rollObj = {
            //roll: assembleRollField(attrName,displayName,attributes),  //rolltemplate string
            //roll_name: attributes['character_name'],
            //name: displayName,
            //target: ''
        //};

        //const rollString = assembleRollString(rollObj);
        //const roll = await startRoll(rollString);
        //finishRoll(roll.rollId);

        //stats and skills
        let theAPICall = '!power {{ --name|'+displayName+' --leftsub|@{selected|character_name} --Stat Check:|[[ 1d100 + @{selected|'+attrName+'} ]] }}';
        if (fieldName==='combatspeed') {
            //inititive
            theAPICall = '!power {{ --name|'+displayName+' --leftsub|@{selected|character_name} --Stat Check:|[[ [TRKR] 1d100 + @{selected|'+attrName+'} ]] }}';
        }

        const roll = await startRoll(theAPICall);
        finishRoll(roll.rollId);
    };
    k.registerFuncs({funcCore});

    const getMagicTypeTotal = (iMagicType) => {
        let theId='';

        if (iMagicType==='airmagic') {
            theId =  'chaosseed-skills-airmagic-total';
        } else if (iMagicType==='darkmagic') {
            theId = 'chaosseed-skills-darkmargic-total';
        } else if (iMagicType==='deathmagic') {
            theId =  'chaosseed-skills-deathmagic-total';
        } else if (iMagicType==='earthmagic') {
            theId = 'chaosseed-skills-earthmagic-total';
        } else if (iMagicType==='firemagic') {
            theId = 'chaosseed-skills-firemagic-total';
        }  else if (iMagicType==='lifemagic') {
            theId = 'chaosseed-skills-lifemagic-total';
        } else if (iMagicType==='lightmagic') {
            theId = 'chaosseed-skills-lightmagic-total';
        } else if (iMagicType==='watermagic') {
            theId = 'chaosseed-skills-watermagic-total';
        } else if (iMagicType==='eldritchmagic') {
            theId = 'chaosseed-skills-eldritchmagic-total';
        }  else if (iMagicType==='chaosmagic') {
            theId = 'chaosseed-skills-chaosmagic-total';
        }

        return theId;
    }

    const funcSpells = async function({trigger,attributes,sections,casc}){
        const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);
        const powerCard = attributes[sectionName+'_'+rowID+'_spells-powercard'];
        let theAPICall = '';
        //console.log(sectionName);
        //console.log(rowID)
        //console.log(buttonName);
        //console.log(powerCard);

        if (powerCard!=='') {
            theAPICall = powerCard;
        } else {
            //default card
            const theSectionId = sectionName+'_'+rowID+'_';
            const theName = attributes[theSectionId+'spells-name'];
            const theMagicType = schemaCore[idSkills][attributes[theSectionId+'spells-magictype']].displayname;
            const theLevel = attributes[theSectionId+'spells-level'];
            const theActionType = attributes[theSectionId+'spells-actiontype'];
            const theCostLine = attributes[theSectionId+'spells-costtype']+' '+attributes[theSectionId+'spells-cost'];
            const theMagicTypeTotal = attributes[getMagicTypeTotal(theMagicType)];
            let theRadiusLine = '1 creature';
            if (attributes[theSectionId+'spells-radius']!=='') {
                theRadiusLine = attributes[theSectionId+'spells-radius']+' feet in a '+attributes[theSectionId+'spells-radiustype']
            };
            let theRangeLine = attributes[theSectionId+'spells-range'];
            if ((theRangeLine!=='Self') && (theRangeLine!=='Touch')) {
                theRangeLine = 'Target must be within '+theRangeLine+' feet.';
            }
            const theVs = attributes[theSectionId+'spells-vs'];
            const theAmount = attributes[theSectionId+'spells-amount'];
            const theAmountType = attributes[theSectionId+'spells-amounttype'];
            let theDurationLine = attributes[theSectionId+'spells-duration'];
            if (theDurationLine==='Timed') {
                theDurationLine = attributes[theSectionId+'spells-durationamount']+' '+attributes[theSectionId+'spells-durationtype'];
            }
            const theDesc = attributes[theSectionId+'spells-desc'];
            theAPICall = '!power {{ '+
            ' --name|'+theName+
            ' --leftsub|'+theMagicType+' '+theLevel+' ◆ '+theActionType+
            ' --rightsub|'+theCostLine+
            ' --Attack|[[ 1d100 + '+theMagicTypeTotal+' + floor(@{selected|chaosseed-stats-luck-total}/10) ]] vs '+theVs;

            if (theAmount!=='') {
                theAPICall += 
                    ' --On Hit|Target takes [['+theAmount+'+floor(@{selected|chaosseed-stats-wisdom-total}/5)+floor(@{selected|chaosseed-stats-luck-total}/10)]] '+theAmountType+' damage'+
                    ' --Critical Chance|Target takes  [['+theAmount+'+floor(@{selected|chaosseed-stats-wisdom-total}/5)+floor(@{selected|chaosseed-stats-luck-total}/10)]] extra '+theAmountType+' damage';
            };

            theAPICall += 
                ' --Area|'+theRadiusLine;

            theAPICall += 
                ' --Range|'+theRangeLine;

            theAPICall += 
                ' --Duration|'+theDurationLine;

            if (attributes[theSectionId+'spells-conditiontype']!=='N/A') {
                theAPICall += 
                    ' --Effect|'+attributes[theSectionId+'spells-conditiontype'];
            };

            theAPICall += 
                ' --Spell Desc|'+attributes[theSectionId+'spells-spelleffect'];

            theAPICall += 
                ' --Caster|//@{selected|character_name} '+theDesc+'//';
            '}} ';
        };

        const roll = await startRoll(theAPICall);
        finishRoll(roll.rollId);
    };
    k.registerFuncs({funcSpells});

    const funcAttacks = async function({trigger,attributes,sections,casc}){
        const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);
        let theAPICall = '';
        const theSectionId = sectionName+'_'+rowID+'_';

        const theName = attributes[theSectionId+'attacks-name'];
        const theCharName = attributes['character_name'];
        const theActionType = attributes[theSectionId+'attacks-actiontype'];
        const theRange = attributes[theSectionId+'attacks-range'];
        const theAccStatTot = attributes['chaosseed-stats-'+attributes[theSectionId+'attacks-attackcat']+'-total'];
        const theSkillTot = attributes['chaosseed-skills-'+attributes[theSectionId+'attacks-weapontype']+'-total'];
        const theSkillRank = attributes['chaosseed-skills-'+attributes[theSectionId+'attacks-weapontype']+'-rank'];
        const theAccLine = theAccStatTot
            +'+'+theSkillTot
            +'+'+attributes[theSectionId+'attacks-accbonus']
            +'-'+attributes[theSectionId+'attacks-attacktype']
            ;
        const theVs = attributes[theSectionId+'attacks-vs'];
        const theDamageStatTot = attributes['chaosseed-stats-'+attributes[theSectionId+'attacks-damagestat']+'-total'];
        const theDamageLine = '[[ '+attributes[theSectionId+'attacks-damage']
            +'+floor('+theDamageStatTot+'/5)'
            +'+'+attributes[theSectionId+'attacks-damagebonus']
            +' ]]'
            ;
        const theCritLine = 'If the check is [[50 -'
            +attributes[theSectionId+'attacks-critbonus']
            +'-floor('+attributes['chaosseed-skills-anatomy-total']+'/10)'
            +' ]] or more than needed, it takes an additional [[ '
            +attributes[theSectionId+'attacks-damage']
            +'+floor('+theDamageStatTot+'/5)'
            +'+'+attributes[theSectionId+'attacks-damagebonus']
            +'+'+attributes[theSectionId+'attacks-critdamagebonus']
            +'+floor('+theSkillRank+'/2)'
            +' ]] '
            +attributes[theSectionId+'attacks-damagetype']
            +' ('+attributes[theSectionId+'attacks-damageclass']+') damage'
            ;
        const theDisplay = attributes[theSectionId+'attacks-display'];

        theAPICall = '!power {{'+
            ' --name|'+theName+
            ' --leftsub|'+theCharName+
            ' --rightsub|'+theActionType+' (range: '+theRange+' ft)'+
            ' --Accuracy Check:|[[ 1d100 + '+theAccLine+' ]] vs. '+theVs+
            ' --Damage:|'+theDamageLine+
            ' --Critical Chance:| '+theCritLine+
            ' --Notes:|'+theDisplay
            ;

        const roll = await startRoll(theAPICall);
        finishRoll(roll.rollId);
    };
    k.registerFuncs({funcAttacks});

//<button type="roll" value="
//        !power {{
//               --name|@{selected|primaryname}  
//               --leftsub|@{selected|cname} 
//               --rightsub|@{PrimaryAction} (range: @{selected|primaryrange} ft)
//               --Accuracy Check:|[[ 1d100 + (@{selected|PrimaryType} + @{selected|PrimaryTypeW} + 
// @{selected|primaryaccbonus} - @{selected|PrimaryAttack}) ]] vs. @{selected|primaryaccvs}  
//               --Damage:|[[ @{selected|primarydamage} + @{selected|primarydamagestat}  + 
// @{selected|primarydamagebonus} ]] @{selected|primarydamagetype} @{selected|primaryclass}  Damage  
//               --Critical Chance:| If the check is [[ 50 - @{selected|primarycritbonus} - 
// floor((@{selected|rkAnatomy} + @{selected|skAnatomy})/10)) ]] or more than needed, 
// it takes an additional [[ @{selected|primarydamage} + @{selected|primarycritdambonus} + 
// @{selected|primarydamagestat} + @{selected|primarydamageranks} + @{selected|primarydamagebonus} ]] 
// @{selected|primarydamagetype} @{selected|primaryclass}  Damage    
//               --Notes:|@{selected|primarynotes}  
//            }}" class="btn ui-draggable">
//            </button>