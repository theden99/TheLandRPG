+module.
    const pp_weight = 0.4;
    const gp_weight = 0.3;
    const sp_weight = 0.2;
    const cp_weight = 0.1;

    const theStorageType = [
        'slotAmmoQuiver',
        'slotAmmoBandelero',
        'slotBeltPouchBelt',
        'slotBeltPouchPouch1',
        'slotBeltPouchPouch2',
        'slotStorageBackpack',
        'slotStorageSack',
        'slotStorageWagonMount',
        'slotStorageHouseBank',
        'slotDiscardPile'
    ];

    const getFieldID = (iPage,iZone,iTable,iField,iRowID) => {  // <<<------  duplicate in 
        let theFieldID = iPage;
        if (iZone!=='') { theFieldID += '-'+iZone};
        if (iTable!=='') { 
            if (tableIsTemplate.indexOf(iTable)!==(-1)) {
                theFieldID += '-'+iRowID+'-'+iField
            } else {
                theFieldID += '-'+iTable;
                if (iRowID!=='') {
                    theFieldID = 'repeating_'+theFieldID+'_'+iRowID+'_'  //specific field
                } else {
                    theFieldID = 'repeating_'+theFieldID+'_$X_'  //used in Affects and KFormula => formula = 'SUM of '+iTable+'.iField' => '(@{'+theFieldID+'})'
                }
                theFieldID += iField;
            }
        } else {
            if (iField!=='') { 
                theFieldID += '-'+iField
            };
        };

        //special fields
        if (iPage===idHeader) {
            if (iZone===idCharacter) {
                if (iField===idName) {
                theFieldID = 'character_name'
                }
                if (iField===idToken) {
                    theFieldID = 'character_token'
                }
                if (iField===idAvatar) {
                    theFieldID = 'character_avatar'
                }
            }
        }

        return theFieldID;
    };
    k.registerFuncs({getFieldID});

    const calcCoinWeight = (pp,gp,sp,cp) => {
        let coinTotal = 0;
        coinTotal = coinTotal+
            (pp*pp_weight) +
            (gp*gp_weight) +
            (sp*sp_weight) +
            (cp*cp_weight)
        ;

        return coinTotal;
    };
    k.registerFuncs({calcCoinWeight});

    const calcSectionWeight = (attributes,sections,sectionCalc) => {
        let totItemWeight = 0;
        if (sections[sectionCalc].length > 0) {
            sections[sectionCalc].forEach(id => {
                totItemWeight = totItemWeight + 
                    (attributes[sectionCalc+'_'+id+'_weight'] *
                        attributes[sectionCalc+'_'+id+'_qty']);
            });
        };

        return totItemWeight;
    };
    k.registerFuncs({calcSectionWeight});

    const getSlotTypeSection = (slottype) => {
        let rowSlotTypeSection = 'repeating_inventory-';
        if (slottype==='slottypeArmor') {
            rowSlotTypeSection = rowSlotTypeSection+'armor-items'
        } else if (slottype==='slottypeWeapon') {
            rowSlotTypeSection = rowSlotTypeSection+'weapon-items'
        } else if (slottype==='slottypeAccessory') {
            rowSlotTypeSection = rowSlotTypeSection+'accessory-items'
        } else if (slottype==='slottypeAmmo') {
            rowSlotTypeSection = rowSlotTypeSection+'ammo-items'
        } else if (slottype==='slottypeBeltPouch') {
            rowSlotTypeSection = rowSlotTypeSection+'beltpouch-items'
        } else if (slottype==='slottypeStorage') {
            rowSlotTypeSection = rowSlotTypeSection+'storage-items'
        } 
        else {
            rowSlotTypeSection = rowSlotTypeSection+'discardpile-items';
        }

        return rowSlotTypeSection;
    };
    k.registerFuncs({getSlotTypeSection});

    const doSectionRemoveAll = (attributes,sections,rowSection) => {
        if (sections[rowSection].length > 0) {
            sections[rowSection].forEach(id => {
                k.removeRepeatingRow(rowSection+'_'+id,attributes,sections);
            });
        };
    }
    k.registerFuncs({doSectionRemoveAll});

    const doSectionCopy = (attributes,sections,fromSectionID,toSectionID) => {
        let newRow = {};
        newRow[toSectionID+'_itemname'] = attributes[fromSectionID+'_itemname'];
        newRow[toSectionID+'_slottype'] = attributes[fromSectionID+'_slottype'];
        newRow[toSectionID+'_slottypeitem'] = attributes[fromSectionID+'_slottypeitem'];
        newRow[toSectionID+'_slot'] = attributes[fromSectionID+'_slot'];
        newRow[toSectionID+'_qty'] = attributes[fromSectionID+'_qty'];
        newRow[toSectionID+'_category'] = attributes[fromSectionID+'_category'];
        newRow[toSectionID+'_weight'] = attributes[fromSectionID+'_weight'];
        newRow[toSectionID+'_cost'] = attributes[fromSectionID+'_cost'];
        newRow[toSectionID+'_size'] = attributes[fromSectionID+'_size'];
        newRow[toSectionID+'_armorvalue'] = attributes[fromSectionID+'_armorvalue'];
        newRow[toSectionID+'_armortype'] = attributes[fromSectionID+'_armortype'];
        newRow[toSectionID+'_movetype'] = attributes[fromSectionID+'_movetype'];
        newRow[toSectionID+'_movepen'] = attributes[fromSectionID+'_movepen'];
        newRow[toSectionID+'_attackvs'] = attributes[fromSectionID+'_attackvs'];
        newRow[toSectionID+'_accmod'] = attributes[fromSectionID+'_accmod'];
        newRow[toSectionID+'_dammod'] = attributes[fromSectionID+'_dammod'];
        newRow[toSectionID+'_basedam'] = attributes[fromSectionID+'_basedam'];
        newRow[toSectionID+'_attacktype'] = attributes[fromSectionID+'_attacktype'];
        newRow[toSectionID+'_range'] = attributes[fromSectionID+'_range'];
        newRow[toSectionID+'_critabove'] = attributes[fromSectionID+'_critabove'];
        newRow[toSectionID+'_critmult'] = attributes[fromSectionID+'_critmult'];
        newRow[toSectionID+'_ammotype'] = attributes[fromSectionID+'_ammotype'];
        newRow[toSectionID+'_removeqty'] = attributes[fromSectionID+'_removeqty'];
        newRow[toSectionID+'_recoverperc'] = attributes[fromSectionID+'_recoverperc'];
        newRow[toSectionID+'_notes'] = attributes[fromSectionID+'_notes'];
        newRow[toSectionID+'_effects'] = attributes[fromSectionID+'_effects'];

        k.setAttrs(newRow,true);
    };
    k.registerFuncs({doSectionCopy});

    const doSectionDelete = (attributes,sections,rowSectionID) => {
        k.removeRepeatingRow(rowSectionID,attributes,sections);
    }
    k.registerFuncs({doSectionDelete});

    const doSetLevel = ({trigger,attributes,sections,casc}) => {
        //const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);

        if (attributes['header-character-level']===0) {
            k.setAttrs(
            {
                'header-character-level' : 1,
                'chaosseed-stats-strength-base' : 10,
                'chaosseed-stats-agility-base' : 10,
                'chaosseed-stats-dexterity-base' : 10,
                'chaosseed-stats-constitution-base' : 10,
                'chaosseed-stats-endurance-base' : 10,
                'chaosseed-stats-intelligence-base' : 10,
                'chaosseed-stats-wisdom-base' : 10,
                'chaosseed-stats-charisma-base' : 10,
                'chaosseed-stats-luck-base' : 10
            },true,()=>{console.log('set luck1')});

            k.setAttrs(
            {
                'header-character-level' : 1,
                'chaosseed-stats-strength-base' : 0,
                'chaosseed-stats-agility-base' : 0,
                'chaosseed-stats-dexterity-base' : 0,
                'chaosseed-stats-constitution-base' : 0,
                'chaosseed-stats-endurance-base' : 0,
                'chaosseed-stats-intelligence-base' : 0,
                'chaosseed-stats-wisdom-base' : 0,
                'chaosseed-stats-charisma-base' : 0,
                'chaosseed-stats-luck-base' : 0
            },true,()=>{console.log('set luck2')});
        };
    };
    k.registerFuncs({doSetLevel},{type:['opener']});

    const doWriteLog = (attributes,sections,iMessage) => {
        const systemSection = 'repeating_system-main-messages';
        const systemSectionID = k.generateRowID(systemSection,sections);

        attributes[systemSectionID+'_system-message'] = iMessage;
    };
    k.registerFuncs({doWriteLog});

    const doLogRiseToPower = (attributes,sections,iRiseType,iOldValue,iNewValue) => {
        const systemSection = 'repeating_risetopower-rows';
        const systemSectionId = k.generateRowID(systemSection,sections);

        attributes[systemSectionId+'_risetopower-type'] = iRiseType;
        attributes[systemSectionId+'_risetopower-old'] = iOldValue;
        attributes[systemSectionId+'_risetopower-new'] = iNewValue;
        attributes[systemSectionId+'_risetopower-change'] = iNewValue-iOldValue;
    };
    k.registerFuncs({doLogRiseToPower});

    const doAPIActivityMessage = async function(iItemId,iMessageStart,iMessageDone){
        const theAPICall = '!activityMessage '+iItemId+'|'+iMessageStart+'|'+iMessageDone;

        //const roll = await startRoll(theAPICall);
        //finishRoll(roll.rollId);
    };

    const ApplyEffects = (attributes,iEffects,iMult) => {
        let theOk = 0; //all ok
        let theArea = [];
        let theUpdate = [];
        let theField = '';
        let theValue = 0;
        let theEffects = iEffects;

        if ((theEffects) && (theEffects!=='')) {
            //process each line
            const lines = theEffects.split('\n');
            for(var i = 0;i < lines.length;i++) {
                const theArea = lines[i].split('.');
                theUpdate = theArea[1].split('+');
                if (theUpdate.length===0)  {
                    theUpdate = theArea[1].split('-');
                };

                if (theUpdate.length>0) {
                    theField = theUpdate[0];
                    theValue = parseInt(theUpdate[1])*iMult;
                } else {
                    doWriteLog(attributes,sections,'error parsing effects'+theEffects);
                    theOk = -1;
                }

                if (theOk===0) {
                    const theZone = theArea[0];
                    const theFieldID = getFieldID(idChaosSeed,theZone,theZone,idEquipBonus,theField);
                    attributes[theFieldID] += theValue;
                }
            }
        }

        return theOk;
    }

    const parseFieldId = (iFieldId) => {
        const theFields = iFieldId.split('-');

        return theFields;
    };

    const funcCore = async function({trigger,attributes,sections,casc}){
        const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);
        const attrName = buttonName.replace('-roller-action','-total');
        const zoneName = parseFieldId(attrName)[1]; //chaosseed-stats-agility-total, get stats
        const fieldName = parseFieldId(attrName)[2]; //chaosseed-stats-agility-total, get agility
        const displayName = schemaCore[zoneName][fieldName].displayname;

        //const rollObj = {
            //roll: assembleRollField(attrName,displayName,attributes),  //rolltemplate string
            //roll_name: attributes['character_name'],
            //name: displayName,
            //target: ''
        //};

        //const rollString = assembleRollString(rollObj);
        //const roll = await startRoll(rollString);
        //finishRoll(roll.rollId);

        //stats and skills
        let theAPICall = '!power {{ --name|'+displayName+' --leftsub|@{character_name} --Stat Check:|[[ 1d100 + @{'+attrName+'} ]] }}';
        if (fieldName==='combatspeed') {
            //inititive
            theAPICall = '!power {{ --name|'+displayName+' --leftsub|@{character_name} --Stat Check:|[[ [TRKR] 1d100 + @{'+attrName+'} ]] }}';
        }

        const roll = await startRoll(theAPICall);
        finishRoll(roll.rollId);
    };
    k.registerFuncs({funcCore});

    const getMagicTypeTotal = (iMagicType) => {
        const theId = 'chaosseed-skills-'+iMagicType+'-total';

        return theId;
    }

    const getMagicTypeStatBonus = (iMagicType) => {
        const theId = 'chaosseed-skills-'+iMagicType+'-statbonus';

        return theId;
    }

    const funcSpells = async function({trigger,attributes,sections,casc}){
        const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);
        const theSectionId = sectionName+'_'+rowID+'_';
        const powerCard = attributes[sectionName+'_'+rowID+'_spells-powercard'];
        let theAPICall = '';
        //console.log(sectionName);
        //console.log(rowID)
        //console.log(buttonName);
        //console.log(powerCard);

        //subtract cost from current
        const theCost = attributes[theSectionId+'spells-cost'];
        const theCostType = attributes[theSectionId+'spells-costtype'];
        let theCurHealth = attributes['curhealth'];
        let theCurMana = attributes['curmana'];
        let theCurStamina = attributes['curstamina'];
        if (theCostType==='Health') {
            theCurHealth -= theCost;
            attributes['curhealth'] = theCurHealth;
        } else if (theCostType==='Mana') {
            theCurMana -= theCost;
            attributes['curmana'] = theCurMana;
        } else if (theCostType==='Stamina') {
            theCurStamina -= theCost;
            attributes['curstamina'] = theCurStamina;
        }

        if (powerCard!=='') {
            theAPICall = powerCard;
        } else {
            //default card
            const theName = attributes[theSectionId+'spells-name'];
            const theMagicType = schemaCore[idSkills][attributes[theSectionId+'spells-magictype']].displayname;
            const theSubskill = attributes[theSectionId+'spells-subskill'];
            const theLevel = attributes[theSectionId+'spells-level'];
            const theActionType = attributes[theSectionId+'spells-actiontype'];
            const theCostLine = theCostType+' '+theCost;
            let theMagicTypeTotal = attributes[getMagicTypeTotal(attributes[theSectionId+'spells-magictype'])];
            let theMagicTypeRank = attributes['chaosseed-skills-'+attributes[theSectionId+'spells-magictype']+'-rank'];
            let theMagicTypeStatBonus = attributes[getMagicTypeStatBonus(attributes[theSectionId+'spells-magictype'])];
            if (attributes[theSectionId+'spells-subskill']!=='NA') {
                theMagicTypeTotal = attributes[getMagicTypeTotal(attributes[theSectionId+'spells-subskill'])];
                theMagicTypeRank = attributes['chaosseed-skills-'+attributes[theSectionId+'spells-subskill']+'-rank'];
                theMagicTypeStatBonus = attributes[getMagicTypeStatBonus(attributes[theSectionId+'spells-subskill'])];
            };
            const theMagicTypeAcc = theMagicTypeTotal-theMagicTypeStatBonus; //rank+bonuses - stat bonus already added to global spell acc/damage
            const theMagicTypeDamage = Math.floor(theMagicTypeRank/5); //rank+bonuses/5
            const theMagicEfficencyDamage = Math.floor(attributes['chaosseed-efficiencies-'+attributes[theSectionId+'spells-magictype']+'-total']/25);
            let theRadiusLine = '1 creature';
            if (attributes[theSectionId+'spells-radius']!=='') {
                theRadiusLine = attributes[theSectionId+'spells-radius']+' feet in a '+attributes[theSectionId+'spells-radiustype']
            };
            let theRangeLine = attributes[theSectionId+'spells-range'];
            if ((theRangeLine!=='Self') && (theRangeLine!=='Touch')) {
                theRangeLine = 'Target must be within '+theRangeLine+' feet.';
            }
            const theVs = attributes[theSectionId+'spells-vs'];
            const theEffect = attributes[theSectionId+'spells-effect']
            const theAmount = attributes[theSectionId+'spells-amount'];
            const theAmountType = attributes[theSectionId+'spells-amounttype'];
            let theDurationLine = attributes[theSectionId+'spells-duration'];
            if (theDurationLine==='Timed') {
                theDurationLine = attributes[theSectionId+'spells-durationamount']+' '+attributes[theSectionId+'spells-durationtype'];
            }
            const theDesc = attributes[theSectionId+'spells-desc'];
            theAPICall = '!power {{ '+
            ' --name|'+theName+
            ' --leftsub|'+theMagicType+' '+theLevel+' ◆ '+theActionType+
            ' --rightsub|'+theCostLine;

            if (theVs!=='N/A') {
                theAPICall +=
                    ' --Attack|[[ 1d100 + @{chaosseed-combatvalues-spellacc-total} [Magic Acc] + '+theMagicTypeAcc+' [Skill] ]] vs '+theVs;
                if (theAmount!=='') {
                    theAPICall += 
                        ' --On Hit|Target takes [['+theAmount+'+@{chaosseed-combatvalues-spelldamage-total} [Magic Dam] +'+theMagicTypeDamage+' [Skill Dam] + '+
                        theMagicEfficencyDamage+' [Eff Dam] ]] '+theAmountType+' '+theEffect+
                        ' --Critical Chance|Target takes  [['+theAmount+'+@{chaosseed-combatvalues-spelldamage-total} [Magic Dam] +'+theMagicTypeDamage+' [Skill Dam] + '+
                        theMagicEfficencyDamage+' [Eff Dam] ]] extra '+theAmountType+' '+theEffect;
                };
            } else {
               if (theAmount!=='') {
                theAPICall += 
                    ' --On Cast|Target takes [['+theAmount+'+@{chaosseed-combatvalues-spelldamage-total} [Magic Dam] +'+theMagicTypeDamage+' [Skill Dam] + '+
                    theMagicEfficencyDamage+' [Eff Dam] ]] '+theAmountType+' '+theEffect;
                };
            };


            theAPICall += 
                ' --Area|'+theRadiusLine;

            theAPICall += 
                ' --Range|'+theRangeLine;

            theAPICall += 
                ' --Duration|'+theDurationLine;

            if (attributes[theSectionId+'spells-conditiontype']!=='N/A') {
                theAPICall += 
                    ' --Condition|'+attributes[theSectionId+'spells-conditiontype'];
            };

            theAPICall += 
                ' --Spell Desc|'+attributes[theSectionId+'spells-spelleffect'];

            theAPICall += 
                ' --Caster|//@{character_name} '+theDesc+'//';
            '}} ';
        };

        const roll = await startRoll(theAPICall);
        finishRoll(roll.rollId);
    };
    k.registerFuncs({funcSpells});

    const funcAttacks = async function({trigger,attributes,sections,casc}){
        const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);
        let theAPICall = '';
        const theSectionId = sectionName+'_'+rowID+'_';

        //subtract cost from current
        const theCost = attributes[theSectionId+'attacks-cost'];
        const theCostType = attributes[theSectionId+'attacks-resource'];
        let theCurHealth = attributes['curhealth'];
        let theCurMana = attributes['curmana'];
        let theCurStamina = attributes['curstamina'];
        if (theCostType==='Health') {
            theCurHealth -= theCost;
            attributes['curhealth'] = theCurHealth;
        } else if (theCostType==='Mana') {
            theCurMana -= theCost;
            attributes['curmana'] = theCurMana;
        } else if (theCostType==='Stamina') {
            theCurStamina -= theCost;
            attributes['curstamina'] = theCurStamina;
        }

        const theName = attributes[theSectionId+'attacks-name'];
        const theCharName = attributes['character_name'];
        const theActionType = attributes[theSectionId+'attacks-actiontype'];
        const theRange = attributes[theSectionId+'attacks-range'];
        const theAccStatTot = attributes['chaosseed-combatvalues-'+attributes[theSectionId+'attacks-attackcat']+'acc-total'];
        const theDamageStatTot = attributes['chaosseed-combatvalues-'+attributes[theSectionId+'attacks-attackcat']+'damage-total'];
        const theSkillTot = attributes['chaosseed-skills-'+attributes[theSectionId+'attacks-weapontype']+'-total'];
        const theSkillRank = attributes['chaosseed-skills-'+attributes[theSectionId+'attacks-weapontype']+'-rank'];
        const theAccLine = theAccStatTot
            +' ['+attributes[theSectionId+'attacks-attackcat']+' Bonus] + '+theSkillTot
            +' [Skill Bonus] + '+attributes[theSectionId+'attacks-accbonus']
            +' [Acc Bonus] - '+attributes[theSectionId+'attacks-attacktype']
            +' [Attack Penalty]'
            ;
        const theVs = attributes[theSectionId+'attacks-vs'];
        const theDamageLine = '[[ '+attributes[theSectionId+'attacks-damage']
            +' [Base Dam] + '+theDamageStatTot
            +' ['+attributes[theSectionId+'attacks-attackcat']+' Bonus] + '+(theSkillRank/5)
            +' [Skill Dam] + '+attributes[theSectionId+'attacks-damagebonus']
            +' [Dam Bonus] ]]'
            ;
        const theAnatomyBonus = Math.floor(attributes['chaosseed-skills-anatomy-rank']/10);
        const theCritSkillBonus = Math.floor(theSkillRank/2);
        const theCritLine = 'If the check is [['+attributes[theSectionId+'attacks-critabove']+' -'
            +' '+theAnatomyBonus
            +' [Anatomy Bonus] ]] or more than needed, it takes an additional [[ '
            +attributes[theSectionId+'attacks-damage']
            +' [Base Dam] + '+theDamageStatTot
            +' [Skill Dam] + '+attributes[theSectionId+'attacks-damagebonus']
            +' [Dam Bonus] + '+attributes[theSectionId+'attacks-critdamagebonus']
            +' [Crit Dam Bonus] + '+theCritSkillBonus
            +' [Crit Skill Bonus] ]] '
            +attributes[theSectionId+'attacks-damagetype']
            +' ('+attributes[theSectionId+'attacks-damageclass']+') damage'
            ;
        const theDisplay = attributes[theSectionId+'attacks-display'];
        const theCostLine = attributes[theSectionId+'attacks-cost']+' '+attributes[theSectionId+'attacks-resource'];

        theAPICall = '!power {{'+
            ' --name|'+theName+
            ' --leftsub|'+theCharName+
            ' --rightsub|'+theActionType+' (range: '+theRange+' ft)'+
            ' --Accuracy Check:|[[ 1d100 + '+theAccLine+' ]] vs. '+theVs+
            ' --Damage:|'+theDamageLine+
            ' --Critical Chance:|'+theCritLine+
            ' --Cost:|'+theCostLine+
            ' --Notes:|'+theDisplay
            ;

        const roll = await startRoll(theAPICall);
        finishRoll(roll.rollId);
    };
    k.registerFuncs({funcAttacks});

