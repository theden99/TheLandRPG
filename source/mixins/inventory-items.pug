mixin inventory-items(iTableName,iIsStorage)
    - const theTableName = 'inventory-'+iTableName;
    +tab({name:theTableName, container:"article", button:{class:'inventory-main-tabs-button boxed','data-i18n':iTableName}})
        .inventory-storage-section
            .div-item-header.div-inline
                +span({}).item-head-addbuttongap
                +span({'data-i18n':'Name'}).item-head-itemname.underlined
                +span({'data-i18n':'Item Type'}).item-head-slottype.underlined
                +span({'data-i18n':'Qty'}).item-head-qty.underlined
                +span({'data-i18n':'Slot'}).item-head-slot.underlined
                +span({'data-i18n':'Equipped'}).item-head-equipped.underlined
            .div-inven-items.div-inline
                +customControlFieldset({name:theTableName+'-items',addClass:'',trigger:{addFuncs:['calcTotWeightInventory'],triggeredFuncs:['doRemoveItem']}})
                    +text({name:'itemname',class:'item_itemname underlined',value:''})
                    +select({name:'slottypeitem',class:'item_slottype underlined'})
                        +option({value:'slottypeArmor','data-i18n':'Armor'})
                        +option({value:'slottypeWeapon','data-i18n':'Weapon'})
                        +option({value:'slottypeAccessory','data-i18n':'Accessory'})
                        +option({value:'slottypeAmmo','data-i18n':'Ammo'})
                        +option({value:'slottypeBeltPouch','data-i18n':'Belt/Pouch'})
                        +option({value:'slottypeStorage','data-i18n':'Storage'})
                        +option({value:'slottypeDiscardPile','data-i18n':'Discard Pile'})
                    +number({name:'qty',class:'item_qty boxed',value:0,trigger:{affects:['inventory-totweight']}})
                    +select({name:'slot',class:'item_slot underlined'})
                        +option({value:'slotArmorHead','data-i18n':'Head'})
                        +option({value:'slotArmorBody','data-i18n':'Body'})
                        +option({value:'slotArmorArms','data-i18n':'Arms'})
                        +option({value:'slotArmorHands','data-i18n':'Hands'})
                        +option({value:'slotArmorLegs','data-i18n':'Legs'})
                        +option({value:'slotArmorFeet','data-i18n':'Feet'})
                        +option({value:'slotWeaponSet1Primary','data-i18n':'Primary-1'})
                        +option({value:'slotWeaponSet1Secondary','data-i18n':'Secondary-1'})
                        +option({value:'slotWeaponSet1Ranged','data-i18n':'Ranged-1'})
                        +option({value:'slotWeaponSet1Thrown','data-i18n':'Thrown-1'})
                        +option({value:'slotWeaponSet2Primary','data-i18n':'Primary-2'})
                        +option({value:'slotWeaponSet2Secondary','data-i18n':'Secondary-2'})
                        +option({value:'slotWeaponSet2Ranged','data-i18n':'Ranged-2'})
                        +option({value:'slotWeaponSet2Thrown','data-i18n':'Thrown-2'})
                        +option({value:'slotAccessoryNeck','data-i18n':'Neck'})
                        +option({value:'slotAccessoryEarLeft','data-i18n':'Ear Left'})
                        +option({value:'slotAccessoryEarRight','data-i18n':'Ear Right'})
                        +option({value:'slotAccessoryWristLeft','data-i18n':'Wrist Left'})
                        +option({value:'slotAccessoryWristRight','data-i18n':'Wrist Right'})
                        +option({value:'slotAccessoryWaist','data-i18n':'Waist'})
                        +option({value:'slotAccessoryAnkleLeft','data-i18n':'Ankle Left'})
                        +option({value:'slotAccessoryAnkleRight','data-i18n':'Ankle Right'})
                        +option({value:'slotAccessoryRing1','data-i18n':'Ring-1'})
                        +option({value:'slotAccessoryRing2','data-i18n':'Ring-2'})
                        +option({value:'slotAccessoryRing3','data-i18n':'Ring-3'})
                        +option({value:'slotAccessoryRing4','data-i18n':'Ring-4'})
                        +option({value:'slotAccessoryRing5','data-i18n':'Ring-5'})
                        +option({value:'slotAccessoryRing6','data-i18n':'Ring-6'})
                        +option({value:'slotAccessoryRing7','data-i18n':'Ring-7'})
                        +option({value:'slotAccessoryRing8','data-i18n':'Ring-8'})
                        +option({value:'slotAmmoQuiver','data-i18n':'Quiver'})
                        +option({value:'slotAmmoBandelero','data-i18n':'Bandelaro'})
                        +option({value:'slotBeltPouchBelt','data-i18n':'Belt'})
                        +option({value:'slotBeltPouchPouch1','data-i18n':'Pouch 1'})
                        +option({value:'slotBeltPouchPouch2','data-i18n':'Pouch 2'})
                        +option({value:'slotStorageBackpack','data-i18n':'Backpack'})
                        +option({value:'slotStorageSack','data-i18n':'Sack'})
                        +option({value:'slotStorageWagonMount','data-i18n':'Wagon/Mount'})
                        +option({value:'slotStorageHouseBank','data-i18n':'House/Bank'})
                        +option({value:'slotDiscardPile','data-i18n':'Discard Pile'})
                    +select({name:'isequipped',class:'item_equipped underlined',readonly:''})
                        +option({value:0,'data-i18n':'No'})
                        +option({value:1,'data-i18n':'Yes'})
                    +button({name:'equip-storage-button',type:'action','data-i18n':'Equip',class:'staging-button',trigger:{triggeredFuncs:['doEquip']}})
                    +button({name:'unequip-storage-button',type:'action','data-i18n':'Unequip',class:'staging-button',trigger:{triggeredFuncs:['doUnequip']}})
                    +text({name:'trashcan-padding',class:'item_padding',readonly:''})
                    +text({name:'slottype',class:'underlined hidden',readonly:''})
                    +collapseItemDetails('inventory-totweight')
+module.
    const doLockDown = function({trigger,attributes,sections,casc}){
        const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);
        const theSectionID = sectionName+'_'+rowID;

        //don't allow fields to change if equipped
        if (attributes[theSectionID+'_isequipped']==1) {
            if ((buttonName=='armorvalue') || (buttonName=='movepen') || (buttonName=='effects')) {
                attributes[theSectionID+'_'+buttonName] = trigger.previousValue;
            }
        }
    };
    k.registerFuncs({doLockDown});

    const doEquipItem = (attributes,sections,iSectionID,iMult) => {
        let theArmorValue = attributes[iSectionID+'_armorvalue'];
        let theMovePen = attributes[iSectionID+'_movepen'];
        let theEffects = attributes[iSectionID+'_effects'];

        theArmorValue = theArmorValue*iMult;
        theMovePen = theMovePen*iMult;

        if (theArmorValue!==0) {
            attributes['chaosseed-combatstats-armorvalue-equipbonus'] += theArmorValue;
        };

        if (theMovePen!==0) {
            attributes['chaosseed-movement-movepenalty-equipbonus'] += theMovePen;
        };

        const theOk = ApplyEffects(attributes,theEffects,iMult);

        return theOk;
    };
    k.registerFuncs({doEquipItem});

    const doEquip = ({trigger,attributes,sections,casc}) => {
        const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);

        const theSectionID = sectionName+'_'+rowID;
        if (attributes[theSectionID+'_isequipped']===0) {
            const bOk = doEquipItem(attributes,sections,theSectionID,1);
            if (bOk===0) {
                attributes[theSectionID+'_isequipped'] = 1;
            } else {
                const theMessage = 'error equipping '+theSectionID;
                doLogError(attributes,sections,theMessage);
            };
        };''
    };
    k.registerFuncs({doEquip});

    const doUnequip = ({trigger,attributes,sections,casc}) => {
        const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);

        const theSectionID = sectionName+'_'+rowID;
        if (attributes[theSectionID+'_isequipped']===1) {
            const bOk = doEquipItem(attributes,sections,theSectionID,-1);
            if (bOk===0) {
                attributes[theSectionID+'_isequipped'] = 0;
            } else {
                const theMessage = 'error equipping '+theSectionID;
                doLogError(attributes,sections,theMessage);
            };
        };
    };
    k.registerFuncs({doUnequip});

    const doRemoveItem = ({trigger,attributes,sections,casc}) => {
        const [sectionName,rowID,buttonName] = k.parseTriggerName(trigger.name);

        calcTotWeightInventory({trigger,attributes,sections,casc});
    };
    k.registerFuncs({doRemoveItem});

+scss('sheet').
    .inventory-storage-section{
        display: flex;
        flex-wrap: wrap;
        align-items: top;
        gap: var(--tiny-gap);
        width: 760px;
        .div-item-header{
            .item-head-addbuttongap{
                width: 23px;
            }
            .item-head-itemname{
                margin-right: 3px;
                width: 120px;
                text-align: center;
                background-color: lightblue;
            }
            .item-head-slottype{
                margin-right: 3px;
                width: 90px;
                text-align: center;
                background-color: lightblue;
            }
            .item-head-slot{
                margin-right: 3px;
                width: 90px;
                text-align: center;
                background-color: lightblue;
            }
            .item-head-qty{
                margin-right: 3px;
                width: 40px;
                text-align: center;
                background-color: lightblue;
            }
            .item-head-equipped{
                margin-right: 3px;
                width: 70px;
                text-align: center;
                background-color: lightblue;
            }
        }
        .div-inven-items{
            .staging-button{
                @include k.base-button;
                background-color: lightblue;
            }
            .item_padding{
                width: 10px;
            }
            .item_itemname{
                width: 120px;
            }       
            .item_slottype{
                width: 90px;
            }       
            .item_slot{
                width: 90px;
            }       
            .item_qty{
                width: 40px;
            }       
            .item_equipped{
                width: 70px;
            }       
        }
    }
